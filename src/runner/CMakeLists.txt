# Make sure clang/opt are using the right flags for running passes based on the llvm version
if("${LLVM_VERSION_MAJOR}" VERSION_GREATER_EQUAL "12")
  set(OPT_USE_LEGACY_PM "-enable-new-pm=0")
  set(CLANG_USE_LEGACY_PM "-flegacy-pass-manager")
endif()

set(TARGET_LIBRARIES
    connection
    iomodels
    target
    utility
    )

foreach(TARGET_LIBRARY ${TARGET_LIBRARIES})
    list(APPEND TARGET_LIBRARIES_GENEXPRS_FILES \"$<TARGET_FILE_NAME:${TARGET_LIBRARY}>\")
endforeach()

list(FILTER TARGET_LIBRARIES_GENEXPRS_FILES EXCLUDE REGEX "[.]a>\"$")
list(FILTER TARGET_LIBRARIES_GENEXPRS_FILES EXCLUDE REGEX "[.]lib>>\"$")

list(JOIN TARGET_LIBRARIES_GENEXPRS_FILES "," TARGET_LIBRARIES_FILES_LIST)
set(TARGET_LIBRARIES_FILES_LIST "[${TARGET_LIBRARIES_FILES_LIST}]")

set(TARGET_NEEDED_COMPILATION_FLAGS "${CMAKE_THREAD_LIBS_INIT} -flto")

if (LIBRT)
    set(TARGET_NEEDED_COMPILATION_FLAGS "${TARGET_NEEDED_COMPILATION_FLAGS} -lrt")
endif()

list(JOIN TARGET_NEEDED_COMPILATION_FLAGS " " TARGET_NEEDED_COMPILATION_FLAGS)

set(DRIVER_FILE "$<TARGET_FILE_NAME:driver>")

set(INSTRUMENTER_FILE "$<TARGET_FILE_NAME:instrumenter>")

set(TARGET_NAME TestCoCa.py)

configure_file(${TARGET_NAME} ${TARGET_NAME} @ONLY)
file(
    GENERATE
    OUTPUT "$<CONFIG>/${TARGET_NAME}"
    INPUT ${CMAKE_CURRENT_BINARY_DIR}/${TARGET_NAME}
    )

install(PROGRAMS "${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/${TARGET_NAME}" DESTINATION ".")
